@page "/respond"
@using GdscRecruitment.Features.Fields
@using GdscRecruitment.Features.Responses
@using GdscRecruitment.Features.Fields.Views
@using GdscRecruitment.Features.Responses.Views
@using GdscRecruitment.Features.Fields.Models
@using GdscRecruitment.Features.FieldOptions
@using GdscRecruitment.Features.FieldOptions.Model
@inherits GdscRecruitment.Common.Shared.BaseComponent<ResponsesService>
@inject FieldsService FieldsService
@inject FieldOptionsService OptionsService
@inject NavigationManager Navigation

<PageTitle>GDSC UPT Recruitment Form</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm
                @bind-isValid="@success"
                Model="@_responses"
                OnValidSubmit="Submit">
                @foreach (var question in _questions)
                {
                    @switch (question.FieldType)
                    {
                        case FieldTypeEnum.Text:
                        {
                            <MudTextField
                                T="string"
                                Label="@question.Name"
                                Required="@question.IsRequired"
                                Placeholder="@question.Placeholder"
                                RequiredError="This field cannot be empty!"
                                @bind-Value="@_responses[question.Id].Value"
                                For="@(() => _responses[question.Id].Value)"/>
                            break;
                        }
                        case FieldTypeEnum.Checkbox:
                        {
                            <MudCheckBox
                                Label="@question.Name"
                                Required="@question.IsRequired"
                                RequiredError="This field cannot be empty!"
                                @bind-Checked="@_responses[question.Id].Value"
                                Color="Color.Secondary"/>
                            break;
                        }
                        case FieldTypeEnum.Dropdown:
                        {
                            <MudSelect @bind-Value="@_responses[question.Id].Value" Variant="Variant.Text" Margin="Margin.Dense" Label="@question.Name">
                                @foreach (var option in options)
                                {
                                    if (option.FieldId == question.Id)
                                    {
                                        <MudSelectItem T="string" Value="option.Label"/>
                                    }
                                }
                            </MudSelect>
                            break;
                        }
                        case FieldTypeEnum.Radio:
                        {
                            <div class="d-flex">
                                <MudRadioGroup
                                    For="@(() => _responses[question.Id].Value)"
                                    @bind-SelectedOption="_responses[question.Id].Value"
                                    T="string"
                                    Required="question.IsRequired"
                                    RequiredError="This field cannot be empty!">
                                    @foreach (var option in options)
                                    {
                                        if (option.FieldId == question.Id)
                                        {
                                            <MudTooltip Color="Color.Secondary" Arrow="true">
                                                <MudRadio Color="Color.Secondary" Option="option.Label">@option.Label</MudRadio>
                                            </MudTooltip>
                                        }
                                    }
                                </MudRadioGroup>
                            </div>
                            break;
                        }
                    }
                }
                <div>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(success)" Class="m1-auto">Submit</MudButton>
                </div>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool success = false;
    
    private List<FieldOptionsModel> options;

    private Dictionary<string, ResponseRequestView> _responses = new ();

    private IList<FieldResponseView> _questions = new List<FieldResponseView>();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _questions = await FieldsService.Get();

        options = await OptionsService.Get();

        foreach (var question in _questions)
        {
            _responses[question.Id] = new ResponseRequestView
            {
                FieldId = question.Id,
                UserId = User!.Id,
            };
        }
    }

    private async Task Submit()
    {
        success = true;
        foreach ( (var key, var response) in _responses)
        {
            await Service.Add(response);
        }
        
        Navigation.NavigateTo("/");
    }

}