@page "/fields"
@inject NavigationManager Navigation
@using GdscRecruitment.Features.Fields.Views
@using GdscRecruitment.Common.Utilities
@using GdscRecruitment.Features.Fields.Components
@using GdscRecruitment.Features.Fields.Models
@using GdscRecruitment.Utilities
@inherits OwningComponentBase<FieldsService>
@inject ViewModelHelper<FieldResponseView> Helper

<PageTitle>Fields</PageTitle>

<AuthorizeView Roles="@Roles.Admin">
    <AddEditFieldsForm OnValidSubmit="FetchData"></AddEditFieldsForm>
</AuthorizeView>


@TableActions

<MudTable
    Class="mt-5"
    Loading="_loading"
    @bind-SelectedItems="_selected"
    T="FieldResponseView"
    MultiSelection="true"
    Items="fields"
    OnRowClick="NavigateTo"
    Hover="true"
    Filter="element => FilterFunc(element, _searchingString)"
    Breakpoint="Breakpoint.Sm"
    LoadingProgressColor="Color.Info">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Fields</MudText>

        <MudSpacer/>
        <MudTextField
            @bind-Value="_searchingString"
            Placeholder="Search"
            Adornment="Adornment.Start"
            AdornmentIcon="fa-solid fa-sharp fa-magnifying-glass"
            AdornmentColor="Color.Tertiary"
            IconSize="Size.Medium"
            Class="mt-0">
        </MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<FieldModel, object>(x => x.Name)">
                @Helper.GetLabel(x => x.Name)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<FieldModel, object>(x => x.IsRequired)">
                @Helper.GetLabel(x => x.IsRequired)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<FieldModel, object>(x => x.Placeholder)">
                @Helper.GetLabel(x => x.Placeholder)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                InitialDirection="SortDirection.Ascending"
                SortBy="new Func<FieldModel, object>(x => x.FieldType)">
                @Helper.GetLabel(x => x.FieldType)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="@Helper.GetLabel(x => x.Name)">@context.Name</MudTd>
        <MudTd DataLabel="@Helper.GetLabel(x => x.IsRequired)">@context.IsRequired</MudTd>
        <MudTd DataLabel="@Helper.GetLabel(x => x.IsRequired)">@context.Placeholder</MudTd>
        <MudTd DataLabel="@Helper.GetLabel(x => x.FieldType)">
            <MudTooltip Color="@context.FieldType.GetColor()" Arrow="true">
                <MudText Color="@context.FieldType.GetColor()">@context.FieldType.GetName()</MudText>
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudButton
                IconColor="Color.Error"
                StartIcon="fa-solid fa-trash"
                OnClick="() => Delete(context)">
            </MudButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager/>
    </PagerContent>

    <LoadingContent>
        <MudText>Fetching data...</MudText>
    </LoadingContent>

    <NoRecordsContent>
        <MudText>There are no records to display</MudText>
    </NoRecordsContent>
</MudTable>

@TableActions
@code
{
    private IList<FieldResponseView> fields = new List<FieldResponseView>();
    private bool _loading = true;
    private string _searchingString = "";
    private HashSet<FieldResponseView> _selected = new();

    private RenderFragment TableActions => @<FieldsTableActions SelectedItems="@_selected"></FieldsTableActions>;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _loading = false;
        Console.WriteLine("Fetching data . . .");
        fields = await Service.Get();
    }

    private async Task FetchData()
    {
        Console.WriteLine("Fetching data . . .");
        fields = await Service.Get();
    }

    private void NavigateTo(TableRowClickEventArgs<FieldResponseView> tableRowClick)
    {
        Navigation.NavigateTo("/fields/" + tableRowClick.Item.Id);
    }

    private static bool FilterFunc(FieldResponseView element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return element.Placeholder != null && (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.Placeholder.Contains(searchString, StringComparison.OrdinalIgnoreCase) || $"{element.Name} {element.Placeholder} {element.Id}".Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }

    private async Task Delete(FieldResponseView context)
    {
        _loading = true;
        await Service.Delete(context.Id);
        await FetchData();
        _loading = false;
    }
}
