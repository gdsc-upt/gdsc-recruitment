@page "/workshops"
@inject NavigationManager Navigation
@using GdscRecruitment.Common.Utilities
@using GdscRecruitment.Common.Features.Workshops.Views
@using GdscRecruitment.Common.Features.Workshops.Models
@using Microsoft.AspNetCore.Components
@using GdscRecruitment.Admin.Features
@inherits OwningComponentBase<GdscRecruitment.Common.Features.Workshops.WorkshopsService>
@inject ViewModelHelper<WorkshopResponseView> Helper

<PageTitle>Workshops</PageTitle>

@TableActions

<MudTable
    Class="mt-5"
    Loading="_loading"
    @bind-SelectedItems="_selected"
    T="WorkshopResponseView"
    MultiSelection="true"
    Items="fields"
    OnRowClick="NavigateTo"
    Hover="true"
    @* Filter="element => FilterFunc(element, _searchingString)" *@
    Breakpoint="Breakpoint.Sm"
    LoadingProgressColor="Color.Info">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Fields</MudText>

        <MudSpacer/>
        <MudTextField
            @bind-Value="_searchingString"
            Placeholder="Search"
            Adornment="Adornment.Start"
            AdornmentIcon="fa-solid fa-sharp fa-magnifying-glass"
            AdornmentColor="Color.Tertiary"
            IconSize="Size.Medium"
            Class="mt-0">
        </MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<WorkshopModel, object>(x => x.Title)">
                @Helper.GetLabel(x => x.Title)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<WorkshopModel, object>(x => x.Description)">
                @Helper.GetLabel(x => x.Description)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<WorkshopModel, object>(x => x.Location)">
                @Helper.GetLabel(x => x.Location)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<WorkshopModel, object>(x => x.Capacity)">
                @Helper.GetLabel(x => x.Capacity)
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>

    @* <RowTemplate> *@
    @*     <MudTd DataLabel="@Helper.GetLabel(x => x.Name)">@context.Name</MudTd> *@
    @*     <MudTd DataLabel="@Helper.GetLabel(x => x.IsRequired)">@context.IsRequired</MudTd> *@
    @*     <MudTd DataLabel="@Helper.GetLabel(x => x.IsRequired)">@context.Placeholder</MudTd> *@
    @*     <MudTd DataLabel="@Helper.GetLabel(x => x.FieldType)"> *@
    @*         <MudTooltip Color="@context.FieldType.GetColor()" Arrow="true"> *@
    @*             <MudText Color="@context.FieldType.GetColor()">@context.FieldType.GetName()</MudText> *@
    @*         </MudTooltip> *@
    @*     </MudTd> *@
    @*     <MudTd> *@
    @*         <MudButton *@
    @*             IconColor="Color.Error" *@
    @*             StartIcon="fa-solid fa-trash" *@
    @*             OnClick="() => Delete(context)"> *@
    @*         </MudButton> *@
    @*     </MudTd> *@
    @* </RowTemplate> *@

    <PagerContent>
        <MudTablePager/>
    </PagerContent>

    <LoadingContent>
        <MudText>Fetching data...</MudText>
    </LoadingContent>

    <NoRecordsContent>
        <MudText>There are no records to display</MudText>
    </NoRecordsContent>
</MudTable>

@TableActions

@code
{
    private IList<WorkshopResponseView> fields = new List<WorkshopResponseView>();
    private bool _loading = true;
    private string _searchingString = "";
    private HashSet<WorkshopResponseView> _selected = new();

    private RenderFragment TableActions => @<FieldsTableActions SelectedItems="@_selected"></FieldsTableActions>;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _loading = false;
        Console.WriteLine("Fetching data . . .");
        fields = await Service.Get();
    }

    private async Task FetchData()
    {
        Console.WriteLine("Fetching data . . .");
        fields = await Service.Get();
    }

    private void NavigateTo(TableRowClickEventArgs<WorkshopResponseView> tableRowClick)
    {
        Navigation.NavigateTo(AdminRoutes.GetEditPath(tableRowClick.Item.Id));
    }

    // private static bool FilterFunc(WorkshopResponseView element, string searchString)
    // {
    //     if (string.IsNullOrWhiteSpace(searchString))
    //         return true;
    //     return element.Placeholder != null && (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) || element.Placeholder.Contains(searchString, StringComparison.OrdinalIgnoreCase) || $"{element.Name} {element.Placeholder} {element.Id}".Contains(searchString, StringComparison.OrdinalIgnoreCase));
    // }

    private async Task Delete(WorkshopResponseView context)
    {
        _loading = true;
        await Service.Delete(context.Id);
        await FetchData();
        _loading = false;
    }
}